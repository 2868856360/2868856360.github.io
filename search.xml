<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>无算法课的一天——志愿者日常</title>
      <link href="/2022/01/20/wu-suan-fa-ke-de-yi-tian-zhi-yuan-zhe-ri-chang/"/>
      <url>/2022/01/20/wu-suan-fa-ke-de-yi-tian-zhi-yuan-zhe-ri-chang/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;今天是没有学习了，现在是9.30准备结束今天的学习日程，今天一天便是如此了。最近我对自己的文字很是苦恼，我希望我的文字可以更成熟一些，抑或着多用一些抒发感情的句子，那种句子打出来会让我很舒服。昨天准备细看一下沉默的大多数，希望能有一些想法，今天却也是没有实现这个目标，挺打击人的。</p><p>&emsp;&emsp;今天做了一天志愿者的工作。说实话，我本是抱着较为懒惫的心态来的，希望可以混一些，但是我的性格又是比较认真的性格，既然做了便把它做好，如此，倒是很费心的在那里苦苦工作了半天，于早上8点至下午1点30分，做一个无情的打字机器。我已经很温柔的来讲话了，但是总有一些长不大的人，喜欢以自己为中心，处处不能理解别人，这种人很悲哀吧。于这种人，或许我不该对他生气，应该怜悯他，他应该不曾有过交心的朋友的，也不曾有一帮狐朋狗友来相互取乐，志同道合。这或许是无聊中的一些思考了。中午结束后，我便去了子旭家，带着他去找了子豪，随后拉到了我们家，打了一会儿三国杀之后便睡了，因为今天是比较累的，大致休息到了7点钟，家伟打来了电话。我与他一起坐了一些时间，随后便交替打无限火力，如今我的联盟竞技水平已经严重下滑了，可以明显感觉到心有气而力不足。</p><p>&emsp;&emsp;今天在评论区看到了一个比较有意思的发言。欲望 - 实力 = 痛苦。 一时间我竟找不出错误，现在也感觉这句话很正确，这个公式虽然定义的草率，不严谨，却也一下击中了我的本心。他说对了一部分，但是我个人认为欲望 - 实力 不应该只等于痛苦， 因为人，一定要有欲望，才会去不断提高自己的实力，让自己的实力配的上自己的野心、欲望，在追逐自己目标的过程中，不可或缺的会产生痛苦，甚至绝望，但是如果你挺了下去，这些痛苦与绝望也终将会化为你成功果实下的土壤，让你茁壮成长。我们应该做一个如老人与海中老人一样强大的人，这种人是要不断与自己的极限作斗争的，所以他会不断的失败，但是一个不断成长的人一定会不断失败，不断的痛苦，他才会变得强大。所以，粗略一看这个公式说对了一些，但是仔细一想，这个公式却是那么的不靠谱与不切实际，我们不应该为了避免痛苦而不敢坦率的面对自己的欲望，我们应该不断的与自己斗争，不断的失败，才能不断的成长。</p><p>&emsp;&emsp;以上便是一些比较有意思的随想了，另外附上今天的几张志愿的照片，以证实自己今天做了一些事，没有虚以度日。end!</p><img src="https://cdn.jsdelivr.net/gh/2868856360/images/img/20220120220958.jpg" alt="6c55b967500e7e11550bfdfe27ef4e5" style="zoom:50%;" /><p><img src="https://cdn.jsdelivr.net/gh/2868856360/images/img/20220120221006.jpg" alt="56a68f4d37dc26c012dc34a7ba5445b"></p><p><img src="https://cdn.jsdelivr.net/gh/2868856360/images/img/20220120221018.jpg" alt="0e6a7857a1c9645ab69233991e90800"></p><p>（ps:最后这张图的老人是一名抗越的老兵，名字好像是叫冯小乐，还是田小乐，有些记不清了。但是老人很直爽，在抗越战争中击杀16名敌军，致敬！）</p>]]></content>
      
      
      
        <tags>
            
            <tag> -日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法基础课第二天Daytwo and 博客上传图片方法</title>
      <link href="/2022/01/19/suan-fa-ji-chu-ke-di-er-tian-daytwo/"/>
      <url>/2022/01/19/suan-fa-ji-chu-ke-di-er-tian-daytwo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;今天将昨天的内容反复背了几遍，很是无聊，却也有点成就感。秉持着算法如同竞技游戏一样的观点，我将之前的内容都练习了一遍（越学习越发现过目不忘的能力是真的强，尤其是就学习而言，简直是神乎其技了）。随后便开始做练习题，基础课的练习题难度要比蓝桥杯难度要低下去许多了，甚至习题都只是模板套进来的，较为简单。今天的重点题目是归并排序的练习题，叫做：统计逆序数的个数。其余都较为简单，此外实数二分也是比较有意思的，尤其是保留多位的题目。需要用到1e-8 这个是保留6位小数。</p><p>&emsp;&emsp;此外就是算法外的一些东西了，算是日记吧。（因为我的博客几乎没人看，只有我自己看，所以就写一些属于自己的东西，日后回看起来可能会很有趣）今天中午洗了个澡，吹风机真是个好东西，我是在洗澡间用吹风机把整个身上都吹干才出来的，一点都不冷，算是生活小妙招吧。今天去做了志愿者，找了几个老奶奶，老爷爷。帮他们弄出了核酸采集码，明天就是正式志愿者了，希望尽可能的多帮助他们去做一些事情吧，核酸检测。天气讲道理今天是比较冷的，最开始出去办事的时候有点下小雪，不过中午的时候便好些了。下午在床上躺了半天，最近这种整理知识的习惯真的是越来越喜欢了，希望以后可以继续保持吧。</p><h2 id="今日份学习内容"><a href="#今日份学习内容" class="headerlink" title="今日份学习内容"></a>今日份学习内容</h2><h3 id="第k个数"><a href="#第k个数" class="headerlink" title="第k个数"></a>第k个数</h3><p><img src="https://cdn.jsdelivr.net/gh/2868856360/images/img/20220119221449.png" alt="image-20220119200629174"></p><p>&emsp;&emsp;这道题是极为简单的题目，几乎与昨天的快速排序一样，所以我对其较为乏味了。本题相比较快速排序，只是多了输入k,输出q[k-1]罢了。</p><p>代码如下：</p><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <cstring>#include <cstdio>#include <algorithm>using namespace std;const int N =100010;int n , k;int q[N];void quick_sort(int q[] , int l , int r)&#123;    if(l >= r) return;    int i = l - 1, j = r + 1 , x = q[l + r >> 1];    while( i < j )    &#123;        do i ++ ; while( q[i] < x);        do j -- ; while( q[j] > x);        if(i < j) swap(q[i] , q[j]);    &#125;    quick_sort(q , l , j);    quick_sort(q , j + 1 , r);&#125;int main()&#123;    scanf("%d%d" , &n , &k);    for(int i = 0; i < n; i++) scanf("%d" , &q[i]);    quick_sort( q , 0 , n - 1);    int x = q[k - 1];    cout << x;    return 0;&#125;</code></pre><h3 id="逆序对的数量"><a href="#逆序对的数量" class="headerlink" title="逆序对的数量"></a>逆序对的数量</h3><p><img src="https://cdn.jsdelivr.net/gh/2868856360/images/img/20220119221737.png" alt="image-20220119200953146"></p><p>&emsp;&emsp;本题比较有意思。需要通过归并排序的特点，将区间分为两部分，将结果分为三部分。</p><ol><li>结果1 ：左边有逆序对的，merge_sort(q ,  l , mid);</li><li>结果2：右面有逆序对的，merge_sort(q , mid + 1 , r );</li><li>结果3：左右两边同时有数为逆序对。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/2868856360/images/img/20220119221750.png" alt="image-20220119201206212"></p><p>重点为结果3：如果i 与 j 为逆序对，那么 i 到 mid之间的数均与j互为逆序对。所以每一步tmp[k++] = q[j++]都要伴随 res += mid - i + 1 的操作。同时考虑结果的输出，倘若数列为倒序，即 n , n -  1 ,  n -  2 , … 1; 单考虑第一个 他的逆序对为n-1 , 第二个为n - 2 ,依次类推，我们需要把所有逆序对都加起来。即 (n-1 + 1 ) * (n -1)/ 2 约为n的平方/2  n 为100000 数据很大，会超过int 的范畴，这里我们用long long 。 代码如下。</p><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <cstring>#include <cstdio>#include <algorithm>using namespace std;typedef long long LL;const int N = 100010;int n;int q[N] , tmp[N];LL merge_sort(int q[] , int l , int r )&#123;    if( l >= r) return 0;    int mid = l + r >> 1;    LL res = merge_sort(q , l , mid) + merge_sort(q , mid + 1 , r);    int k = 0, i = l , j = mid + 1;    while( i <= mid && j <= r)    &#123;        if(q[i] <= q[j]) tmp[k++] = q[i++];        else         &#123;            res += mid - i + 1;            tmp[k++] = q[j++];        &#125;    &#125;    while( i <= mid ) tmp[k++] = q[i++];    while( j <= r) tmp[k++] = q[j++];    for(int i = l , j = 0; i <= r; i++ , j++) q[i] = tmp[j];    return res;&#125;int main()&#123;    scanf("%d" , &n);    for(int i = 0; i < n; i++) scanf("%d" , &q[i]);    cout << merge_sort(q , 0 , n-1);    return 0;&#125;</code></pre><h3 id="数的三次方根"><a href="#数的三次方根" class="headerlink" title="数的三次方根"></a>数的三次方根</h3><p>很简单，<img src="https://cdn.jsdelivr.net/gh/2868856360/images/img/20220119221802.png" alt="image-20220119201915919">注意1e-8 , printf(“%lf” , l);就好</p><p>代码如下：</p><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;int main()&#123;    double n;    cin >> n;        double l = -10000 , r = 10000 ;    while( r - l > 1e-8 )    &#123;        double  mid = (l + r) / 2;        if(mid * mid * mid >= n) r = mid;        else l = mid;    &#125;        printf("%lf", l);    return 0 ;&#125;</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>&emsp;&emsp;今天收获情况较为一般，但也不算虚度本天，下午闲来无事看了几眼王小波的《沉默的大多数》，将那一篇章节看完了，字不多，内容不少，因为赶时间要去拿打印的纸，便没有认真仔细阅读，收获甚微，希望明天我可以对它有一定程度的思考，写进日记里。但是明天要去做志愿者，不知道要做到什么地步，到时候在另做调整吧。</p><p>&emsp;&emsp;结束，end!</p><h2 id="后续：关于上传图片"><a href="#后续：关于上传图片" class="headerlink" title="后续：关于上传图片"></a>后续：关于上传图片</h2><p>&emsp;&emsp;前面博客写完了的，但是，上传图片却出了问题。。。博客不用的时间太长了，每天也没有整理博客上传的习惯，过了太久，都忘记了。甚至都忘记了上传图片需要右键图片点击上传图片，所以呀，好记性不如烂笔头。初中英语老师的教诲不知不觉却是记了一辈子了的，有机会一定要去看看英语老师，一晃好长时间了，却也是没有很高的成就，但是一直很怀念她，时常想起。虽然不记得叫什么名字了，等之后吧，有机会，要去一次二中，好歹去问一问英语老师的名字，记在心里。</p><p>&emsp;&emsp;说多了，接下来是解决上传图片的问题，首先进入github, 然后找到settings</p><p><img src="https://cdn.jsdelivr.net/gh/2868856360/images/img/20220119223458.png" alt="image-20220119223117074"></p><p>之后点击developer settings</p><p><img src="https://cdn.jsdelivr.net/gh/2868856360/images/img/20220119223509.png" alt="image-20220119223152586"></p><p>在之后点击personal access tokens</p><p><img src="https://cdn.jsdelivr.net/gh/2868856360/images/img/20220119223516.png" alt="image-20220119223234750"></p><p>注意， 图库一定是要repo的才能用。</p><p>在之后就是github图床设置的问题</p><p><img src="https://cdn.jsdelivr.net/gh/2868856360/images/img/20220119223522.png" alt="image-20220119223332316"></p><p>自定义域名要用这个，不然会一直显示上传失败。。太搞了。</p><p>以上 再次end!</p>]]></content>
      
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法基础课第一天Dayone</title>
      <link href="/2022/01/18/suan-fa-ji-chu-ke-di-yi-tian-dayone/"/>
      <url>/2022/01/18/suan-fa-ji-chu-ke-di-yi-tian-dayone/</url>
      
        <content type="html"><![CDATA[<h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><p>&emsp;&emsp;目前学习计划是跟着acwing上的算法基础课进行学习的。今天并不是算法学习的第一天，之前零零散散已经学习了一个月左右的时间，但是真正系统化学习，真正开始整理笔记，有计划的学习这可以说是第一天。这些东西就先不传到网上去了，准备等30天后集中把内容传到网上。</p><p>&emsp;&emsp;目前我的安排是一天视频课，一天习题课，轮番进行。今天学习的任务是快速排序，归并排序，二分查找。视频课就安安心心听课，背模板，将模板背下来后第二天便是习题课的一天，一共两道题，目前不清楚我能做到什么程度。随遇而安。</p><p>&emsp;&emsp;根据闫学灿的教学安排：</p><p>上课</p><p>&emsp;&emsp;认真听思想，听懂大致解题思路。</p><p>课下</p><ol><li>将代码模板理解并且背过。</li><li>课下将题目会写后写3~5遍</li></ol><p>&emsp;&emsp;个人观点：第二天起床后写一遍，隔几天再写一遍效果更好。这种东西跟打lol一样，属于是竞技类游戏，长时间不动竞技能力就会下降，需要经常性复习，巩固模板能力。</p><h2 id="今日学习内容"><a href="#今日学习内容" class="headerlink" title="今日学习内容"></a>今日学习内容</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>&emsp;&emsp;快速排序——分治</p><ol><li>确定分界点，可定为q[l] , q[l + r &gt;&gt; 1] , q[r]。通常情况下为了避免边界问题会将分界点设置为q[l + r &gt;&gt; 1]。</li><li>调整区间。！！较为重要。边界点左边都是小于边界点的， 边界点右边都是大于边界点的。用指针i，j来完成。do while的形式。</li><li>递归处理左右两段。</li></ol><p>代码如下：</p><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <algorithm>#include <cstdio>#include <cstring>using namespace std;const int N = 100010;int n;int q[N];void quick_sort(int q[] , int l , int r)&#123;    if(l >= r ) return;        int i = l - 1, j = r + 1 , x = q[l + r >> 1];        while(i < j)    &#123;        do i++; while(q[i] < x);        do j--; while(q[j] > x);        if(i < j) swap(q[i] , q[j]);    &#125;        quick_sort(q , l , j);    quick_sort(q , j + 1 , r);&#125;int main()&#123;    scanf("%d" , &n);        for(int i = 0; i < n; i++) scanf("%d" , &q[i]);        quick_sort(q , 0 , n - 1);        for(int i = 0; i < n; i++) printf("%d " , q[i]);        return 0;&#125;</code></pre><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>&emsp;&emsp;归并排序——分治</p><ol><li>找到边界点：mid = l + r &gt;&gt; 1;</li><li>递归两个区间；</li><li>合并两个区间；</li><li>设置一个暂用数组；</li><li>两个区间用指针进行比较，小的放在咱哟个数组里面；</li><li>倘若一个数组已经全部用完，则另一个数组剩余数据全部放在暂用区间中。</li><li>最后再将暂存数组中的数据全部放回原数组中。</li></ol><p>代码如下：</p><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <cstring>#include <cstdio>#include <algorithm>using namespace std;const int N = 100010;int n;int q[N] , tmp[N];void  merge_sort(int q[] , int l , int r)&#123;    if(l >= r) return;        int mid = l + r >> 1;        merge_sort(q , l , mid) , merge_sort(q , mid + 1 , r);        int k = 0 , i = l , j = mid + 1;        while(i <= mid && j <= r)        if(q[i] <= q[j]) tmp[ k ++ ] = q[ i ++ ];        else tmp[ k ++ ] = q[ j ++ ];        while(i <= mid) tmp[k++] = q[i++];    while(j <= r) tmp[k++] = q[j++];        for(int i = l , j = 0; i <= r; i++ , j++) q[i] = tmp[j];        &#125;int main()&#123;    scanf("%d" , &n);        for(int i = 0; i < n; i++) scanf("%d" , &q[i]);        merge_sort(q , 0 , n-1);        for(int i = 0; i < n; i++) printf("%d " , q[i]);        return 0;&#125;</code></pre><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><h4 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h4><p>&emsp;&emsp;整数二分步骤：</p><ol><li>找一个区间[L,R]，使得答案一定在该区间中。</li><li>找一个判断条件，使得该判断条件具有二段性，并且答案一定是该二段性的分界点。</li><li>分析终点M在该判断条件下是否成立，如果成立，考虑答案在哪个区间，如果不成立，考虑答案在哪个区间。</li><li>如果更新方式写的是L = Mid 需要在计算mid 的时候为 mid = l + r + 1 &gt;&gt; 1;</li></ol><h5 id="查找左端点"><a href="#查找左端点" class="headerlink" title="查找左端点"></a>查找左端点</h5><pre class=" language-c++"><code class="language-c++"> while(l < r)        &#123;            int mid = l + r >> 1;            if(st[mid] >= x) r = mid;            else l = mid + 1;        &#125;</code></pre><h5 id="查找右端点"><a href="#查找右端点" class="headerlink" title="查找右端点"></a>查找右端点</h5><pre class=" language-c++"><code class="language-c++">while(l < r)            &#123;                int mid = l + r + 1 >>1;                if (st[mid] <= x) l = mid;                else r = mid - 1;            &#125;</code></pre><h4 id="实数二分"><a href="#实数二分" class="headerlink" title="实数二分"></a>实数二分</h4><p>实数二分则需要注意精度的问题。1e-8是保留6位小数。还有输出方式 printf(“%lf” , l);</p><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;int main()&#123;    double n;    cin >> n;    double l = -10000 , r = 10000;    while(r - l > 1e-8)    &#123;        double mid = (l + r)/2;        if(mid * mid * mid >= n) r = mid;        else l = mid ;    &#125;    printf("%lf" , l);    return 0;&#125;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;这部分内容实际上并不是一天内完成，期间的内容与蓝桥杯的课也有些冲突，比如二分，导致我学的较为简单，否则又少不得一番功夫。但是这些内容我确实是实打实的掌握了的，以后会更好的。其实这里面的内容更多的是背下来了，当然也有一部分没有理解，但是总归是掌握了很大一部分，比如最一开始归并排序分成了两部分，如此递归岂不是一个数为一个区间才能跳出来。但是后来想了，无论分成多小的部分，最终都要回到那两个区间里，他要分成多少个小区间区别不大，我们只要重点分析那两个区间的情况就好了。另外我也在纸上认真推导了快排的过程。还有一个小的知识点是稳定的排序，归并排序是稳定的排序，而快速排序是不稳定的，但是快速排序可以通过设置一个&lt;数字，序号&gt;这种形式来达到稳定的排序。</p><p>&emsp;&emsp;以上！ end。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何阅读一本书——读后感</title>
      <link href="/2021/09/06/ru-he-yue-du-yi-ben-shu-du-hou-gan/"/>
      <url>/2021/09/06/ru-he-yue-du-yi-ben-shu-du-hou-gan/</url>
      
        <content type="html"><![CDATA[<h2 id="书籍摘要"><a href="#书籍摘要" class="headerlink" title="书籍摘要"></a>书籍摘要</h2><p>&emsp;&emsp;书中有很多不经意间发人深思的句子，可能是我的知识储备太浅薄了，对于作者这么伟大的人来讲，这些都是最基本的东西，我却需要理解一番。</p><p>比如第一章第零节：<strong>太多的咨询就如同太少的咨询一样，都是对理解力的阻碍。</strong></p><p><strong>当今媒体正在以压倒性的泛滥咨询阻碍了我们的理解力。</strong></p><p>简单两句话，却深含道理。不觉让人细思极恐：手机用户，电视用户等所面对的是一种复杂的组成——从独创的华丽辞藻到经过审慎挑选的资料与统计——目的都在让人不需要面对困难或努力。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -如何阅读一本书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何阅读一本书--分析阅读</title>
      <link href="/2021/08/06/ru-he-yue-du-yi-ben-shu-jie-xi/"/>
      <url>/2021/08/06/ru-he-yue-du-yi-ben-shu-jie-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h3 id="写在序言里面的一些琐言碎语"><a href="#写在序言里面的一些琐言碎语" class="headerlink" title="写在序言里面的一些琐言碎语"></a>写在序言里面的一些琐言碎语</h3><p>&emsp;&emsp;本文节选《如何阅读一本书》中的六到九章节，位于第二篇，阅读的第三个层次：分析阅读。既然是序言嘛，而且估计这篇文章不会被很多人看到，所以我就随便叨叨些自己的东西了。首先，为什么要读这本书呢，这本书是偶然间在罗翔老师的视频里看到的，罗翔老师一直是我比较喜欢的一个普法up主，偶尔也会出一些关于读书，人生讨论的视频，是一位专业素养很高很有声望的教授，是我想要成为的样子。其实在读高中的时候我就在想，这个世界究竟是如何运转的呢，我以后一定要了解这个世界，认识这个世界。步入大学后，虽然这个想法一直有，但是自身很贪玩，再加上家长思想功利的局限性，认为除了读专业书籍之外都是浪费时间，毫无用处。毕竟是亲生父母，是将我从小养到大的人，怎么会害我呢，带着这种心思，浑浑噩噩。由于不喜欢专业，再加上读其他书都是浪费时间这种观念的趋势，使我浪费了许多时间。直到这个暑假，我才幡然醒悟，看了罗翔老师的一个视频，视频名字是什么不记得了，但是记得里面的内容：他将读书分为功利性读书和非功利性读书。什么是功利性读书呢，功利性读书就是所读的书籍都是为了挣钱服务的，它决定了你的上限，决定了你最终会有如何的成就。而非功利性阅读呢？它决定了你的下限，决定了你在人生低谷时，迷茫的时候，失败的时候的下限，你再差，因为非功利性的阅读，你也有过人之处，而且你读的这些书是你真正喜欢的东西，它或许可以陪伴你度过你的低估。之后又看了B站up林所长的一个视频，大致意思是：人不能被自己的专业所限制住，以后就业时抑或工作时，所需要用到的知识不仅是你的专业知识，更多的夹杂着其他学科的知识，比如博弈论，销售论，心理学等等，能够灵活运用这些知识才能使你的工作做的出色。这句话本身是否整我有待商榷，但是这给我打开了一条新的道路，即非功利性阅读的可行性，以及我在高中时候的理想：去充分的认识这个世界。在这些up的引导下，我决定先从罗翔老师的《如何阅读一本书》开始学习。</p><h3 id="真正的序言"><a href="#真正的序言" class="headerlink" title="真正的序言"></a>真正的序言</h3><p>&emsp;&emsp;说实话，这本书真的让我感到惊喜，纠正了很多我以前错误的学习技巧，注意，这里指的是学习技巧，这本书给我最大的收益就是教我如何去学习一本书，去掌握一本书。以我学习的《计算机网络》为例，看到书名，首先就可以联想到这本书是讲计算机＋网络，二者相互结合，并猜测该书讲的应该是网络分类及运行方式的书籍。阅读的大前提是基础阅读，即有着阅读的基本能力：识字，理解字义等。之后进行阅读的第二个层次：检视阅读：大致的阅读。需要注意的技巧后续会更新。第三个层次才是分析阅读。至于为什么先来更新分析阅读呢：分析阅读是最为重要的一个环节，而检视阅读只是粗读，概述。其次写检视阅读需要用到分析阅读的技巧，检视阅读也是非常重要的技能，这里不先写检视阅读知只是因为我需要利用分析阅读的技巧去详细的读检视阅读的内容，然后再去写检视阅读。第四个层次是主题阅读，后续会陆续更新并出一个关于我利用《如何阅读一本书》所提供的技巧来阅读《如何阅读一本书》的整理合集。</p><p>&emsp;&emsp;分析阅读，字面意思，分析你能想到的一切，从多方面角度，通过列纲要，摘要，推测主旨，找出框架，推测作者意图等等方面，来完完整整的了解一本书，这是真正的去掌握一本书，还是以《计算机网络》为例，你要知道每一段话，主旨，表达的意思，你是否能理解，并且列出每一章节的框架，等等技术，你才算是真正读完了这本书。接下来就走进书中，来依次解析六到九四个章节吧。</p><p>&emsp;&emsp;这是一本指导你获得阅读技巧的书籍，与其说是阅读，我个人认为学习技巧这个词更贴切，这是一本教你如何从书籍中（因为当下获得知识的手段多种多样，这本书是教你从书中获取知识）获取知识的学习技巧，方法。他将阅读分成了四个层次，分别是基础阅读，检视阅读，分析阅读，以及最后的主题阅读，此外还写了许多针对不同分类书籍的阅读方法。书中针对四个层次的阅读分别进行了详细的论述，举例，其中分析阅读占比最大。最后，这本书是教你搭建起一个阅读框架体系的一本书，阅读完这本书能为你以后学习，阅读其他资料起到事半功倍的效果，使你少走冤枉路。</p><p>&emsp;&emsp;本章节共有八个规则，在下列大纲中一一解析。</p><h2 id="一本书的分类"><a href="#一本书的分类" class="headerlink" title="一本书的分类"></a>一本书的分类</h2><p>&emsp;&emsp;在本章内总结出的规则，乃至整本书总结出的规则适用于任何读物。</p><h3 id="书籍分类的重要性"><a href="#书籍分类的重要性" class="headerlink" title="书籍分类的重要性"></a>书籍分类的重要性</h3><p>&emsp;&emsp;<strong>规则一：你一定要知道自己在读的是哪一类书，而且要早知道越好。最好在你开始阅读之前就知道。</strong></p><p>&emsp;&emsp;并不是每一本书你都能够清楚的知道书的类别，比如《波特诺的牢骚》，是小说还是心里分析的论著？《赤裸的午餐》是小说，还是反药物滥用的劝导手册？这些其实都是小说，只是主旨深刻。另外有些书：《宇宙与爱因斯坦博士》这本书不是小说，却几乎跟有“可读性”的小说一摸一样。所以，我们并不是很能分辨出书的种类。</p><p>&emsp;&emsp;一本论说性的书主要目的是传播知识。 “知识”在这样的书中被广泛的解读着。<strong>任何一本书，如果主要的内容是由一些管带你，理论，假设，推断所组成，并且作者多少表示了这些主张是有依据的，有道理的，那这种传达只是的书，就是一本论说性的书。</strong></p><p>&emsp;&emsp;通常这样的论说性书籍我们能一眼看出来，但是论说性书籍也是有许多类别的，不同类型的书籍所提供知识与启发模式也不尽相同。所以，区分一本书的类型就显得尤为重要。这里我阅读这本书的目的是想能够更加流畅的阅读我们专业的书籍。如果你是在书店随便找到一本书去看，就不见得能够一眼识出书的类型了。</p><p>&emsp;&emsp;可以通过检视阅读浏览一遍，通过书名，序言，目录，索引，书衣，宣传文案等来了解书的类别。比如《计算机网络》一书，如果你重新读一遍该书的目录，序言等地方或许能对这本书有更加深刻的了解，而这些了解本该是读书之前就该知道的。</p><h3 id="从一本书的书名中你能学到什么"><a href="#从一本书的书名中你能学到什么" class="headerlink" title="从一本书的书名中你能学到什么"></a>从一本书的书名中你能学到什么</h3><p>&emsp;&emsp;作者通过引用《罗马帝国衰亡史》来举例：学生们很疑惑，第一章为什么叫《安东尼时代的帝国版图与武力》，他们很自然的将衰亡史改成了兴亡史，如果他们把标题看的更仔细一点，就会推测出来：安东尼时代就是罗马帝国的巅峰时代。我们通常不愿意这么做，甚至很多人连不太熟悉的书也不愿意读一下书名。</p><p>&emsp;&emsp;阅读书名很重要，但还不够，除非你在心中有一个分类的标准，否则世上再清楚的书名，目录，前言，对你也没有什么帮助。你必须要知道你读的这个书的种类到底是在谈些什么。作者给出的大致分类为：</p><ul><li>小说类</li><li>传达知识，论说类</li><li>可以从论说类中进一步将历史从哲学中分类出来，也可以将二者从科学与数学中区分出来</li></ul><p>&emsp;&emsp;大多数人只要按照这个分类法想一想，就能把绝大多数书都做出适当的分类了。但是，并不是所有书都可以。</p><p>&emsp;&emsp;接下来会讲解更多细致的原则。</p><h3 id="实用性vs理论性作品"><a href="#实用性vs理论性作品" class="headerlink" title="实用性vs理论性作品"></a>实用性vs理论性作品</h3><p>&emsp;&emsp;<strong>实用</strong>是与某种有效的做法有关，不管是立即或长期的功效。而<strong>理论</strong>所关注的却是去明白或了解某件事。我们要超越<strong>知道这是怎么回事</strong>，进而明白<strong>如果我们想做些什么，要怎么利用它</strong>，理论性的作品教你这是什么，实用性的作品教你如何去做你想要做的事，或者你认为应该做的事。</p><p>&emsp;&emsp;或许等开学的时候可以随意拿一本书，翻阅看看，他究竟是什么类型的论说书。</p><p>&emsp;&emsp;本书是实用类型的书，任何一本指南类的书都是实用的。任何一本教你该怎么做，或如何去做，都是实用的书。所有说明某种艺术的学习技巧，任何一个领域的使用手册，像是工程，医药或烹饪，或所有便于分类为“教导性“的深奥论述，如经济，伦理或政治问题的书，都是实用的书。这类书会在实用类的书中作一个特别的归类，这类书一本被称为”规范性“的书。</p><p>&emsp;&emsp;作者又用了几段来深刻实用类书籍的定义：比如伦理类的书籍，他会说在生活中，你该怎么做，不该怎么做，做了会有什么后果等，这种也是指导你去做某件事，他就是实用类书籍；相反，理论性书籍如何定义呢？理论性：有关现代社会学研究只提供人类的行为观察，而不加以评判，既非伦理也无关实用，那就是理论型的书——科学作品。</p><p>&emsp;&emsp;任何一种演说，包含了雄辩和规劝的成分，这种也是实用型作品。</p><p>&emsp;&emsp;有时候我们可以通过书名来进行分类；有时候不能，这个时候需要用检视阅读去了解到书的大意。一本实用的书很快就会露出他的本质：因为它经常会出现”应该“，”应当“，”好坏“，”结果“和”意义“等词眼；理论型作品常常说”是“，并没有”应该“，”应当“之类的字眼，那是在表达某件事是真实的，这些就是事实。</p><p>&emsp;&emsp;作者又提到了一个不错的观点：我们可能不同意某本实用型书作者的说法，但是我们的不同意，并不能将这类书改变成非实用的书。</p><p>&emsp;&emsp;本小节的最后，作者强调，学习，你要学会怀疑，怀疑一切。提出疑问，解决疑问，才能成长。在书的分类上亦是如此，有些书的作者明明书名是理论性的，但是在书中却一直强调你要怎样，如何，教你去思想。你也会发现很多作者是分不清理论和实用的区别的，如同一个小说作家搞不清什么是虚构故事，什么是社会学。你也会发现，有的书，这一部分是这一类，另一部分却是那一类，斯宾诺莎的《伦理学》就是这样，然而这些都是你身为一个读者的优势，通过这个优势，你可以发现作者是如何个编队他要处理的问题的。</p><h4 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h4><p>&emsp;&emsp;本节开头讲了实用与理论的差别，细致的分析了实用与理论的特点，以及如何确认，最后说明并不是所有的书都是依照这样的准则分类的，可能一本书的几个部分，每个部分也有所不同。</p><h3 id="理论性作品的分类"><a href="#理论性作品的分类" class="headerlink" title="理论性作品的分类"></a>理论性作品的分类</h3><h4 id="理论性分类"><a href="#理论性分类" class="headerlink" title="理论性分类"></a>理论性分类</h4><p>&emsp;&emsp;大部分分为：历史，科学，哲学等；所有人都约略知道期间的差异性。但是你要做更仔细更精确的划分也不容易。</p><h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><p>&emsp;&emsp;一般书名都会告诉你他是一本历史说，就算没有，其他的前言也会告诉你。历史家在描述历史时，通常带有个人色彩——个人的评论，观察或意见等。</p><p>&emsp;&emsp;历史就是纪事。是真实的。阅读历史读物时要记得这一点。</p><h4 id="科学"><a href="#科学" class="headerlink" title="科学"></a>科学</h4><p>&emsp;&emsp;科学家最求的是定律或通则，科学类的书名所透露出的讯息通常比历史类要少。大部分是心理学，几何学，物理学之类的字眼。像几何学就是科学，形而上学就是哲学。问题在于很多内容不是一清二楚。比如亚里士多德的作品《物理学》他自己称是科学论述，然而就目前来说，这其实是一本哲学类作品。又比如牛顿的《自然哲学的数学原理》这却是当之无愧的科学的伟大作品。</p><h4 id="哲学"><a href="#哲学" class="headerlink" title="哲学"></a>哲学</h4><p>&emsp;&emsp;哲学家提出的事实或观察，不会超过一般人的生活经验。如果你读一本理论的书，这本书超出了你的日常，例行，正常生活经验，那就是科学类的书籍，否则就是哲学。</p><h4 id="科学与哲学对比"><a href="#科学与哲学对比" class="headerlink" title="科学与哲学对比"></a>科学与哲学对比</h4><p>&emsp;&emsp;哲学家同科学家一样，得出结论一样需要大量的观察实验，并不是只会坐在摇椅上思考人生。只不过他们得出结论的方式不同罢了：<strong>科学家会从它特殊经验的结果做举例，哲学家却会以人类的共通性作例证。</strong></p><p>&emsp;&emsp;PS：前面说我们读书一定要学会怀疑，学会疑问，坦白讲，我总结大纲到这里始终带着疑问，疑问实用性作品和理论性作品的真正区分，但是内心的骄傲以及对大纲这么多的总结，总以为我真的懂了。直到这里，我才是真的懂了。科学家们确实是从特殊经验中举例的，比如伽利略斜塔实验。这个实验是为了证明，是为了得出结论，是想要说出”是“这个字眼。所以，那是理论性的实验。据此也明白了什么是实用性书籍，什么是理论性书籍。</p><h4 id="历史与科学对比"><a href="#历史与科学对比" class="headerlink" title="历史与科学对比"></a>历史与科学对比</h4><p>&emsp;&emsp;历史书更多的是以说故事的方式出现的。历史学家的文辞必须动人，也就是说要遵循说一个好故事的规则。而反观牛顿《自然哲学的数学原理》有多伟大，杰出，却都不是一本好的故事书。</p><h2 id="透视一本书"><a href="#透视一本书" class="headerlink" title="透视一本书"></a>透视一本书</h2><p>&emsp;&emsp;<strong>每一本书的封皮之下都有一套自己的骨架。作为一个分析阅读的读者，你的责任是负责找出这个骨架。一本书出现在你面前时，肌肉抱着骨头，衣服包裹着肌肉，可说是盛装而来。你用不着揭开它的外衣，或是撕去他的肌肉，才能得到在柔软表皮下的那套骨架，但是你一定要用一双X光般的透视眼来看这本书，因为那是你了解一本书，掌握其骨架的基础。</strong></p><p>&emsp;&emsp;<strong>规则二：使用一个单一的句子，或最多几句话（一小段文字）来叙述整本书的内容。</strong></p><p>&emsp;&emsp;对于”整体内容“这件事，光是一个模糊的认知是不够的，你必须确切清楚地了解才行。如果一个阅读者说：”我知道这本书在讲什么，但是我说不出来“。应该是连自己也骗不过的。</p><p>&emsp;&emsp;<strong>规则三：将书中重要的篇章列举出来，说明他们是如何按照顺序组成一个整体的架构。</strong>、</p><p>下面引用我非常喜欢的一段话。</p><p> &emsp;&emsp;那是一栋大厦，拥有许多房间，每层楼也都有房间，有不同的尺寸和形状，不同的外观，不同的用途。这些房间是独立的，分离的。每个房间都有自己的架构与装修设计，但却不是完全独立与分离的。这些房间是用门，拱门，走廊，楼梯串连起来的，也就是建筑师所谓的”动线“架构。因为这些架构是彼此链接的，因此每个部分在整体的使用功能上都要贡献出一己之力，。否则，这栋房子便不适于居住。</p><p> &emsp;&emsp;一栋房子好比一本书，每个部分都要很有秩序的排列起来。每个重要部分都要有一定的独立性。就像我们看到的，每个但一部分有自己的室内架构，装修方式也可能跟其他部分不同。但是却一定要跟其他部分联系起来——这是与功能相关——否则这个部分便无法对整体的只能架构做出任何贡献了。</p><p> &emsp;&emsp;只要内容大致话可以，只要内容不仅是集合体，还够得上是某种程度的整体组合，那其中就必然有一个架构规划，而你一定要找出来才行。</p><h3 id="结构与规划：叙述整本书的大意"><a href="#结构与规划：叙述整本书的大意" class="headerlink" title="结构与规划：叙述整本书的大意"></a>结构与规划：叙述整本书的大意</h3><p> &emsp;&emsp;这一步作者举了5个例子来教<strong>规则二</strong>如何使用。其中说到：找出一个架构是读者的责任，就跟当初作者有责任自己设定一个架构一样。只有当你读完整本书时，才能诚实的放下这个责任。p><h3 id="驾驭复杂的内容：为一本书拟大纲的技巧"><a href="#驾驭复杂的内容：为一本书拟大纲的技巧" class="headerlink" title="驾驭复杂的内容：为一本书拟大纲的技巧"></a>驾驭复杂的内容：为一本书拟大纲的技巧</h3><p>&emsp;&emsp;正如规则三所谈的，不只是将各个部分排列出来，而且是要列出各个部分的纲要，就像是各个部分自成一个整体，各有各的整体性与复杂性。</p><p>&emsp;&emsp;可以总结出一个公式：三步走，分的很详细，如同我写的这个大纲一样。</p><p>&emsp;&emsp;然而并不是所有的书都是需要写出来这样完整的一个大纲的。也不是所有的书都值得，你或许可以在某个地方做些笔记，让你可以回忆起这些东西。</p><p>&emsp;&emsp;不论你是完全照做，或是智障我一个形式，你都必须了解要如何跟着规则走才行。</p><p>&emsp;&emsp;你的生命是短暂的，终有一死。一本书的生命也是有限的，就算不死，也跟所有人造的东西一样是不完美的。因为没有一本书是完美的，所以也不值得为任何一本书写出一个完美的纲要。</p><h3 id="阅读与写作的互惠技巧"><a href="#阅读与写作的互惠技巧" class="headerlink" title="阅读与写作的互惠技巧"></a>阅读与写作的互惠技巧</h3><p>&emsp;&emsp;写作跟阅读是一体两面的事，就像教书和被教一样。如果作者跟老师无法将自己要传达的东西整理出架构，不能整合出要讲的各个部分的顺序，他们就无法知道读者和学生去找出他们的重点，也没办法发现全书的整体架构。</p><p>&emsp;&emsp;一个作品应该有整体感，清楚明白，前后连贯。这确实是一个优秀的写作基本准则。  </p><p>&emsp;&emsp;这两个规则可以帮助我们区分好的作品与坏的作品。如果你已经很努力的运用了规则，却还是难以分辨其中的重点，那不管这本书多有名，应该还是一本坏书。</p><p>&emsp;&emsp;同理也可以用这两个规则去阅读书中某个特别重要的部分。</p><h3 id="发现作者的意图"><a href="#发现作者的意图" class="headerlink" title="发现作者的意图"></a>发现作者的意图</h3><p>&emsp;&emsp;<strong>规则四：找出作者要问的问题</strong></p><p>&emsp;&emsp;作者可能会，也可能不会告诉你他的问题是什么。无论它会不会这么做——尤其是不会的情况——身为读者，你都有责任尽可能精确的找出这些问题。哪一个是主要的，哪一个是次要的。哪个问题先要回答，哪个问题后来菜肴回答的？</p><p>&emsp;&emsp;这里要强调一点：“意图谬误”：这种谬误就是你认为自己可以从作者所写的作品中看透他的内心。</p><p>&emsp;&emsp;我们可以列出一个简短的公式：某件事存吗？是什么样的事？发生的原因是什么?这件事的目的是什么？造成的影响是什么？特性及特征是什么？与其他类似时间，或不相同事件的关联是什么？这件事事如何进行的？</p><p>&emsp;&emsp;书的第一个问题：<strong>整本书谈的是什么？</strong></p><h3 id="分析阅读的第一个阶段"><a href="#分析阅读的第一个阶段" class="headerlink" title="分析阅读的第一个阶段"></a>分析阅读的第一个阶段</h3><p>&emsp;&emsp;这四个规则在一起，能提供读者对一本书架构的认知。真正的读者事一次就完成所有阶段，在分析阅读中，要明白一本书的架构事有阶段性进展的。</p><p>&emsp;&emsp;运用这四个规则能帮助你回答关于一本书的一些基本问题。你会想起第一个问题：这本书谈的是什么？</p><p>你会想起，我们说这是要找出整本书的主题，以及作者事如何运用一些根本性的次要主题或议题，按部就班来发展这个主题，很明显的。运用这前四个阅读规则，能提供你可以回答这个问题的大部分内容——不过这里要指出一点，你可以运用其他规则来回答其他问题的时候，你回答这个问题的精度会高许多。</p><ul><li><strong>规则一：你一定要知道自己在读的是哪一类书，而且要早知道越好。最好在你开始阅读之前就知道。</strong></li><li><strong>规则二：使用一个单一的句子，或最多几句话（一小段文字）来叙述整本书的内容。</strong></li><li><strong>规则三：将书中重要的篇章列举出来，说明他们是如何按照顺序组成一个整体的架构。</strong></li><li><strong>规则四：找出作者要问的问题。</strong></li></ul><h2 id="与作者找出共通用的词汇"><a href="#与作者找出共通用的词汇" class="headerlink" title="与作者找出共通用的词汇"></a>与作者找出共通用的词汇</h2><p>&emsp;&emsp;<strong>规则五:找出重要单字，透过他们与作者达成共识。</strong></p><p>&emsp;&emsp;本章节表达了语言的局限性。任意一门语言都是有局限性的，他不能完完全全的传递人的思想，同一个词语或者同一个字，就有不同的意思，所以，为了确保阅读的准确性，我们需要找出每一篇文章中的关键词。</p><p>&emsp;&emsp;本文中有句话作者说的很棒：如果语言是完美又纯粹的思想媒介，那么这世上就不会有诗了，也不会有那么多因为语言表达能力不行而吃很多亏的人了（比如我）。</p><p>&emsp;&emsp;另外就是专业用语，每一个领域都有其独特的专业用语，而且这些语言没有很系统的被读者熟知。打个比方，如果是科学方面，你遇到一个不是很熟悉的词汇，就大概能猜出其是一个专业词汇；但就哲学而言，有一部分哲学家喜欢用平时常用的词汇作为专业词汇来使用，这方面就会令读者很困挠。</p><p>&emsp;&emsp;有时候你在读一本书时，找出重要的关键词，确定每个词不同意义的转换，并与作者找出共同的词义，你对一本书的理解力就会大大增加了。很少有一些习惯上的小改变，会产生如此宏大的效果。</p><h2 id="判断作者的主旨"><a href="#判断作者的主旨" class="headerlink" title="判断作者的主旨"></a>判断作者的主旨</h2><p>&emsp;&emsp;作者的意图通常在前言的开头就告诉我们了，通常他会承诺要指导我们做某件事。为了确定他有没有遵守这些承诺，我们就一定要找出它的主旨才行。</p><p>&emsp;&emsp;作者的主旨如果没有理论的支持，就只是在抒发个人想法罢了。我们应该知道为什么他认为我们应该被说服，以接受这样的观点。</p><p>&emsp;&emsp;掌握大纲，诠释意图，在主旨与论述的层次中相互交际，你将一本书的各个部分细分出来，就可与找到主旨与论述。然后你再仔细分析一个论述由哪些主旨，甚至词义构成。这两个步骤都完成了，就可以说是真的了解一本书的内容了。</p><h3 id="句子与主旨"><a href="#句子与主旨" class="headerlink" title="句子与主旨"></a>句子与主旨</h3><p>&emsp;&emsp;<strong>规则六：将一本书中最重要的句子圈出来，找出其中的主旨</strong></p><p>&emsp;&emsp;<strong>规则七：从相关文句的关联中，设法构架出一本书的基本论述</strong></p><p>这些规则都是适用于论说类型的作品的。</p><p>作者在这里引用了《君主论》一段话，里面表达了两个主旨观点，并详细做了说明。</p><p>有时候，一些句子在表达的是疑问，他们提出的是问题，而不是答案。主旨则是这些问题的答案</p><h3 id="找出关键句"><a href="#找出关键句" class="headerlink" title="找出关键句"></a>找出关键句</h3><p>&emsp;&emsp;<strong>一个论述类书籍的作者，他沟通的主要核心是他所下的肯定与否定的判断，以及他为什么会这么做的理由。</strong></p><p>即，一篇文章，如果是论述类文章，整体的框架大部分是自上向下的，即先提出观点，再论证观点。我们需要看他的观点，同样也需要找到他论证观点正确的核心依据，或者他给出建议的理由。</p><p>亦或者找出组成关键句的文字来。</p><p>如果遇到感到困惑的地方，暂停一下，缓慢的思考，弄懂后再进行阅读。</p><h3 id="找出主旨"><a href="#找出主旨" class="headerlink" title="找出主旨"></a>找出主旨</h3><p>&emsp;&emsp;你要找出每句话所包含的主旨，进而确定每段话包含的主旨，当你发现了一段话里所使用的文字的意义时，你就和作者找到了共识，如何理解了主旨，即用你自己的语言进行描述，如果你自己描述出，就说明自己也懂了。亦或者能不能举出一个自己所经历过的主旨所形容的经验，或与主旨有某种相关的经验。说明其中通用于一般的道理。</p><h3 id="找出论述"><a href="#找出论述" class="headerlink" title="找出论述"></a>找出论述</h3><p>&emsp;&emsp;规则七的公式：如果可以，找出书中说明重要论述的段落。但是，如果这个论述并没有这样表达出来，你就要去架构出来。你要从这一段或那一段中条句子出来，然后整理出前后顺序的主旨，以及其组成的论述。</p><p>&emsp;&emsp;首先，要记住所有的论述都包含了一些声明，其中有些时你为什么该接受作者这个论述的理由。如果你先找到结论，那就看看理由是什么。反之亦然。</p><p>&emsp;&emsp;其次，你要区分两种论述的不同之处。一种是一一个或多个特殊的事实证明某共通的观念，另一种时一连串的通则来证明更进一步的共通概念 。前者时归纳法，后者是演绎法。</p><p>&emsp;&emsp;第三，找出作者哪些事情是假设，哪些是能证实的或者有依据的，那些是不需要验证的自知之理。</p><h3 id="找出解答"><a href="#找出解答" class="headerlink" title="找出解答"></a>找出解答</h3><p>&emsp;&emsp;<strong>规则八：找出作者的解答。</strong></p><h3 id="分析阅读的第二个阶段"><a href="#分析阅读的第二个阶段" class="headerlink" title="分析阅读的第二个阶段"></a>分析阅读的第二个阶段</h3><p>&emsp;&emsp;第二个问题：这本书详细内容是什么？如何叙述的？只要运用五到八的规则，你就能回答这个问题。当你跟作者达成共识，找出他的关键主旨句和论述，分辨出如何解答他所面对的问题，你就会知道他在这本书里要说的是什么了。</p><p><strong>规则五:找出重要单字，透过他们与作者达成共识。</strong></p><p><strong>规则六：将一本书中最重要的句子圈出来，找出其中的主旨</strong></p><p><strong>规则七：从相关文句的关联中，设法构架出一本书的基本论述</strong></p><p><strong>规则八：找出作者的解答。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> --读书 --分析阅读 --阅读技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建hexo博客及可能遇到的问题</title>
      <link href="/2021/08/05/ru-he-da-jian-hexo-bo-ke-ji-ke-neng-yu-dao-de-wen-ti/"/>
      <url>/2021/08/05/ru-he-da-jian-hexo-bo-ke-ji-ke-neng-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>​        其实早在一年前就想搭建博客了，但是由于自己耐心不够，容易被其他有趣的事情吸引，这些东西也就一直被搁置了。这个假期忽然想起了它，所以花了几天的时间去摸索，探究，遇到问题，解决问题，也算是比较有成就感，今天就来为大家分享如何去搭建简单的基于Hexo框架的博客以及解决搭建过程中可能出现的问题，我的电脑是winndows系统如果是Ios系统可参考<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=8847956621899451483">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo_哔哩哔哩_bilibili</a>这个视频，本篇教程也是基于此来完成的。</p><p>​        本篇文章大致分为两个部分。前一部分来教大家如何搭建起hexo简单博客，以及如何在github中创建库，并将本地文章发送至github；后一部分来教大家如何更换主题，以我用的Matery主题去实现各种需要的实用或不实用的功能。</p><h2 id="搭建Hexo博客"><a href="#搭建Hexo博客" class="headerlink" title="搭建Hexo博客"></a>搭建Hexo博客</h2><h3 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h3><p>​        现在目前代码仓库比较流行的应该就属于git和svn的天下了,前几年的时候svn还是比较火的,首先简单易懂,而且简单的冲突解决本地解决一下就好了,其他的基本上没什么复杂的,单纯不建分支的话git和svn相对来说区别还不是特别大,而且这个svn要更好一些,但是既然使用了git没有不建分支的.</p><p>git网址<a href="https://git-scm.com/download/win">Git - Downloading Package (git-scm.com)</a></p><p><img src="https://i.loli.net/2021/08/05/jotSfcYTnyNdXlx.png" alt="image-20210805165452556">选择这个进行下载</p><p>安装可参考上面的b站视频，无脑下一步即可（注意文件存放位置就好）</p><p>安装好git后在文件夹里鼠标右键<img src="https://i.loli.net/2021/08/05/SRcwr5NZmGEAvIq.png" alt="image-20210805165859020"></p><p>会出现git bash here 之后的操作会在Git bash here 和cmd里面分别执行。</p><h3 id="下载node"><a href="#下载node" class="headerlink" title="下载node"></a>下载node</h3><p>node网址:<a href="https://nodejs.org/en/">Node.js (nodejs.org)</a></p><p><img src="https://i.loli.net/2021/08/05/iWrkmq5lwXZcxsI.png" alt="image-20210805170639088"></p><p>选择第一个进行下载</p><p>安装同样无脑下一步，注意安装位置即可</p><h3 id="检测版本及下载hexo"><a href="#检测版本及下载hexo" class="headerlink" title="检测版本及下载hexo"></a>检测版本及下载hexo</h3><p>用windows的左下角搜索框，搜索**命令提示符,**右键以管理员身份进入</p><pre class=" language-bash"><code class="language-bash">node -v</code></pre><p>会提示版本号</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> -v</code></pre><p>包管理器的版本</p><p>若均出现版本信息，即安装成功</p><p>接下来利用淘宝镜像安装npm包管理器</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre><p><img src="https://i.loli.net/2021/08/05/Y3m9FsjKQlgd2kW.png" alt="image-20210805175448073"></p><pre class=" language-bash"><code class="language-bash">cnpm -v   //可查看版本号</code></pre><p>接下来全局安装Hexo博客</p><pre class=" language-bash"><code class="language-bash">cnpm <span class="token function">install</span> -g hexo-cli</code></pre><p>安装完成后可以用</p><pre class=" language-bash"><code class="language-bash">hexo -v </code></pre><p>去验证hexo版本号；</p><h3 id="创建blog文件夹及初始化博客"><a href="#创建blog文件夹及初始化博客" class="headerlink" title="创建blog文件夹及初始化博客"></a>创建blog文件夹及初始化博客</h3><p>在你中意的盘里面创建blog文件夹</p><p><img src="https://i.loli.net/2021/08/05/JnoGiqyeTEtSM6C.png" alt="image-20210805180453530"></p><p>我是f盘，之后如果有什么情况，把这个blog删掉重新再来就行，不要怕犯错，无非是再来一遍，我第一次试了两遍才出来。</p><p>打开blog文件夹右键git bash here</p><p><img src="https://i.loli.net/2021/08/05/fLTE49JMNVAOQv6.png" alt="image-20210805180815019"></p><p>会出现这个界面输入</p><pre class=" language-bash"><code class="language-bash">hexo init</code></pre><p>稍微等待下就可以初始化博客了</p><h3 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h3><pre class=" language-bash"><code class="language-bash">hexo s</code></pre><p><img src="https://i.loli.net/2021/08/05/zq42jWOtvA37NXy.png" alt="image-20210805181329159"></p><p>输入<a href="http://localhost:4000这个网址，就可以访问你自己的电脑本地的初始化博客了">http://localhost:4000这个网址，就可以访问你自己的电脑本地的初始化博客了</a></p><p><img src="https://i.loli.net/2021/08/05/rX2sqwnvjWMmtFH.png" alt="img"></p><p>初始化的博客如图</p><p>其会默认初始化一篇文章，名为hello word.里面有基本的几个命令教你如何实用hexo命令</p><p>按</p><pre class=" language-bash"><code class="language-bash">ctrl c   </code></pre><p>退出界面 </p><p>其中一条是创建文章</p><pre class=" language-bash"><code class="language-bash">hexo new post n <span class="token string">"我的第一篇博客文章"</span></code></pre><p>执行该命令，之后我们尝试编辑该文章</p><p><img src="https://i.loli.net/2021/08/05/bKkML9PAtJ1Qeix.png" alt="image-20210805181859977"></p><p>首先进入_post文件夹内</p><p>使用命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> source/_posts/</code></pre><p>再使用系统自带的vim 编辑器进行编辑</p><pre class=" language-bash"><code class="language-bash">vim 我的第一篇博客文章.md</code></pre><p>按i进行编辑</p><p><img src="https://i.loli.net/2021/08/05/K8vOFCXGVdgZcSW.png" alt="image-20210805182201745"></p><p>保存退出 按</p><pre class=" language-bash"><code class="language-bash">:wq</code></pre><p>使用</p><pre class=" language-bash"><code class="language-bash">hexo g</code></pre><p>命令将文章部署到本地</p><p>使用</p><pre class=" language-bash"><code class="language-bash">hexo s</code></pre><p>进行预览</p><h3 id="将文章部署到github"><a href="#将文章部署到github" class="headerlink" title="将文章部署到github"></a>将文章部署到github</h3><p>首先需要有github的账号</p><p>github网址：<a href="https://github.com/">GitHub</a></p><p>或者用gitee: <a href="https://gitee.com/">Gitee - 基于 Git 的代码托管和研发协作平台</a></p><p>我这里用的github，访问速度比较慢，gitee是中国的，访问速度会比较快一些。</p><p><img src="https://i.loli.net/2021/08/05/2tkzosaL1EFXA4J.png" alt="image-20210805182817452"></p><p>没有github创建，绑定自己的qq邮箱即可</p><p>接下来是新建仓库</p><p><img src="https://i.loli.net/2021/08/05/tHigO1A7Fsm8CdZ.png" alt="image-20210805182951716"></p><p>注意！！！！这个网址的名字，一定是你的账号名称.github.io否则就会报404无法访问</p><p><img src="https://i.loli.net/2021/08/05/jw2n8Zie7dqP1tS.png" alt="image-20210805183222399"></p><p>下面介绍随便填填，之后点create repository即可</p><p>创建后</p><p>接下来装一个部署的插件</p><p>命令</p><pre class=" language-bash"><code class="language-bash">cnpm <span class="token function">install</span> --save hexo-deployer-git</code></pre><p>接下来在 _config.yml里面设置你在本地发送到远端的网址</p><p>用</p><pre class=" language-bash"><code class="language-bash">vim _config.yml</code></pre><p>命令进行编辑</p><p><img src="https://i.loli.net/2021/08/05/jEH15DYxunNXczG.png" alt="image-20210805183813336"></p><p>这个网址里面，把2868856360的部分换成你的名称即可</p><p>按:wq返回</p><p>接下来</p><pre class=" language-bash"><code class="language-bash">hexo d</code></pre><p>就可以把你的文章部署到github上面了</p><p>等待一会儿后，在网上搜索  2868856360.github.io就可以出现你的文章了（这里的2868856360换成你的账号名称即可）</p><h2 id="更换Matery主题并做部分修改"><a href="#更换Matery主题并做部分修改" class="headerlink" title="更换Matery主题并做部分修改"></a>更换Matery主题并做部分修改</h2><p>登录hexo网站：<a href="https://hexo.io/zh-cn/index.html">Hexo</a></p><p><img src="https://i.loli.net/2021/08/05/zjixypdEh1MJTLH.png" alt="image-20210805185117416"></p><p>点击<strong>主题</strong></p><p>搜索Matery</p><p><img src="https://i.loli.net/2021/08/05/xCyMsGHXw5erTvg.png" alt="image-20210805185239947"></p><p>点击图片即可预览，点击Matery字母可以到对应的github网站上进行下载</p><p>我们这里点击Matery</p><p><img src="https://i.loli.net/2021/08/05/mHLwrFeVJOaTdBZ.png" alt="image-20210805185518880"></p><p>点击Download ZIP 进行下载</p><p>之后解压，放在你的blog目录下themes文件夹下</p><p>之后修改blog目录下的_config.yml文件</p><p>命令</p><pre class=" language-bash"><code class="language-bash">vim _config.yml</code></pre><p><img src="https://i.loli.net/2021/08/05/UA9rR6XW5xMYzBf.png" alt="image-20210805185911183"></p><p>如图 将theme修改为Matery(系统自带的是landxxx记不清了)</p><p>修改后以此执行</p><pre class=" language-bash"><code class="language-bash">hexo ghexo s</code></pre><p>进行预览 如果合适就可以执行以下命令</p><pre class=" language-bash"><code class="language-bash">hexo d </code></pre><p>部署到自己的网站</p><p>接下来按照</p><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍 | 闪烁之狐 (blinkfox.github.io)</a></p><p>这个博客的内容进行一步步填充</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>需要注意的是代码高亮部分，插件的版本落后于git版本，需要将git版本降级才能应用插件</p><p>对应教学网址:<a href="https://www.bilibili.com/video/BV1364y1c7cS?from=search&seid=7461286409470815518">4.Hexo代码高亮_哔哩哔哩_bilibili</a></p><h3 id="在文章中插入图片"><a href="#在文章中插入图片" class="headerlink" title="在文章中插入图片"></a>在文章中插入图片</h3><p>关于在文章中如何插入图片：<a href="https://zhuanlan.zhihu.com/p/265077468">hexo博客如何插入图片 - 知乎 (zhihu.com)</a></p><h3 id="设置评论区"><a href="#设置评论区" class="headerlink" title="设置评论区"></a>设置评论区</h3><p>参考如下：<a href="https://fenghen0918.github.io/2020/06/19/hexo/matery-zhu-ti-valine-ping-lun-xi-tong/">matery主题+Valine评论系统 | 特仑苏 (fenghen0918.github.io)</a></p><h3 id="上传歌单"><a href="#上传歌单" class="headerlink" title="上传歌单"></a>上传歌单</h3><p>参考链接：<a href="https://www.cnblogs.com/mfrank/p/12830097.html#autoid-0-3-0">【Hexo】Hexo 主题 Matery 配置 - 弗兰克的猫 - 博客园 (cnblogs.com)</a></p><p><img src="https://i.loli.net/2021/08/05/AHj452p1MVBETcm.png" alt="image-20210805214417360"></p><p>这是最终的样子</p><p>需要注意的是不能上传网易：&lt;我喜欢&gt;的歌单，但是其他网易自带的歌单都可以上传。</p><h2 id="上传报错"><a href="#上传报错" class="headerlink" title="上传报错"></a>上传报错</h2><p>！！！这个错误很常见。</p><p>问题描述：<br>先是出现错误：<br>error：spawn failed…<br>然后经过一些博客的操作会出现以下问题：<br>fatal: cannot lock ref ‘HEAD’: unable to resolve reference HEAD: Invalid argument error: src refspec<br>或者：<br>error: src refspec HEAD does not match any.等等</p><p>总结一下：<br>问题大多是因为git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容。</p><p>解决办法：<br>删除.deploy_git文件夹;<br>输入</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span></code></pre><p>然后，依次执行：<br>hexo clean<br>hexo g<br>hexo d<br>问题解决。暴力直接，有效。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>​        hexo博客的即使已经相对较为成熟，有很多功能都可以在csdn中搜索到，各种报错的改正方法。这里是记录我在整个搭建博客中遇到的问题以及解决方案，为我自己做个记录，同时也希望能对你有些帮助。后续可能会陆陆续续更新一些好看的博客主题或功能，也会更新一些我学习的知识等等。end。</p>]]></content>
      
      
      
        <tags>
            
            <tag> --hexo --博客 --Git --github --node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有用的网站</title>
      <link href="/2021/08/01/2021-08-01-you-yong-de-wang-zhan/"/>
      <url>/2021/08/01/2021-08-01-you-yong-de-wang-zhan/</url>
      
        <content type="html"><![CDATA[<p>有用的网站：</p><p>设计logo:   <a href="http://www.diugai.com/">www.diugai.com</a></p><p>后续再更新。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> --有用的网址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/01/hello-world/"/>
      <url>/2021/08/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
